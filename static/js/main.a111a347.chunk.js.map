{"version":3,"sources":["components/App/logo.svg","reducers/atm.js","reducers/rootReducer.js","store/index.js","components/Number/index.js","components/App/index.js","actions/index.js","serviceWorker.js","index.js"],"names":["module","exports","INITIAL_STATE","cash","fives","amount","value","tens","twenties","user","authorised","balance","pin","error","withdrawAmount","combineReducers","ATM","state","action","type","concat","payload","JSON","parse","stringify","dispensed","Number","key","Object","keys","reduce","a","b","remaining","store","createStore","rootReducer","applyMiddleware","thunk","props","className","data-value","onClick","connect","dispatch","pinEntry","e","target","dataset","confirmPin","fetch","headers","Accept","method","body","then","response","json","currentBalance","withdrawEntry","withdraw","clearWithdraw","clearPin","cancel","clearError","src","logo","alt","setTimeout","length","repeat","displayString","Array","from","i","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a111a347.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.25bf045c.svg\";","const INITIAL_STATE = {\n    cash: {\n        fives: {\n            amount: 4,\n            value: 5\n        },\n        tens: {\n            amount: 15,\n            value: 10\n        },\n        twenties: {\n            amount: 7,\n            value: 20\n        }\n    },\n    user: {\n        authorised: false,\n        balance: null,\n        pin: '',\n        error: '',\n        withdrawAmount: ''\n    }\n};\n\nexport default (state = INITIAL_STATE, action) => {\n    switch (action.type) {\n        case 'PIN_ENTRY':\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    pin: state.user.pin.concat(action.payload)\n                }\n            };\n\n        case 'PIN_CONFIRMED':\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    authorised: true,\n                    balance: action.payload,\n                    pin: ''\n                }\n            };\n\n        case 'PIN_CLEAR':\n            return { ...state, user: { ...state.user, pin: '' } };\n\n        case 'PIN_ERROR':\n            return {\n                ...state,\n                user: { ...state.user, error: action.payload, pin: '' }\n            };\n\n        case 'WITHDRAW_ENTRY':\n            return {\n                ...state,\n                user: {\n                    ...state.user,\n                    withdrawAmount: state.user.withdrawAmount.concat(\n                        action.payload\n                    )\n                }\n            };\n\n        case 'WITHDRAW_CASH':\n            // hack copy of the state a normal copy causes side effects\n            let cash = JSON.parse(JSON.stringify(state.cash)),\n                dispensed = 0;\n\n            while (dispensed !== Number(state.user.withdrawAmount)) {\n                // note with the most available\n                let key = Object.keys(cash).reduce((a, b) =>\n                    cash[a].amount > cash[b].amount ? a : b\n                );\n                dispensed += cash[key].value;\n                cash[key].amount--;\n\n                if (dispensed > state.user.withdrawAmount) {\n                    dispensed -= cash[key].value;\n                    cash[key].amount++;\n                    let remaining = state.user.withdrawAmount - dispensed;\n\n                    if (remaining === cash.tens.value && cash.tens.amount > 0) {\n                        dispensed += cash.tens.value;\n                        cash.tens.amount--;\n                    } else if (\n                        remaining === cash.fives.value &&\n                        cash.fives.amount > 0\n                    ) {\n                        dispensed += cash.fives.value;\n                        cash.fives.amount--;\n                    } else {\n                        return {\n                            ...state,\n                            user: {\n                                ...state.user,\n                                error: 'Amount not available'\n                            }\n                        };\n                    }\n                }\n            }\n\n            return {\n                ...state,\n                cash,\n                user: {\n                    ...state.user,\n                    balance: state.user.balance - state.user.withdrawAmount,\n                    withdrawAmount: ''\n                }\n            };\n\n        case 'WITHDRAW_CLEAR':\n            return { ...state, user: { ...state.user, withdrawAmount: 0 } };\n\n        case 'CLEAR_ERROR':\n            return { ...state, user: { ...state.user, error: '' } };\n\n        case 'CANCEL':\n            return INITIAL_STATE;\n\n        default:\n            return state;\n    }\n};\n","import { combineReducers } from 'redux';\nimport ATM from './atm';\n\nexport default combineReducers({\n    ATM\n});\n","import { createStore, applyMiddleware } from 'redux';\nimport thunk from 'redux-thunk';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport rootReducer from '../reducers/rootReducer';\n\nconst initialState = {};\n\nexport const store = createStore(\n    rootReducer,\n    initialState,\n    process.env.NODE_ENV === 'development'\n        ? composeWithDevTools(applyMiddleware(thunk))\n        : applyMiddleware(thunk)\n);\n\nexport const configureStore = () => {\n    return store;\n};\n","import React from 'react';\n\nconst Number = props => (\n    <div\n        className={`num ${props.value === 0 ? 'zero' : ''}`}\n        data-value={props.value}\n        onClick={props.onClick}\n    >\n        {props.value}\n    </div>\n);\n\nexport default Number;\n","import React from 'react';\nimport { connect } from 'react-redux';\nimport {\n    pinEntry,\n    confirmPin,\n    withdraw,\n    withdrawEntry,\n    clearWithdraw,\n    clearPin,\n    cancel,\n    clearError\n} from '../../actions/';\nimport Number from '../Number/';\nimport logo from './logo.svg';\nimport './App.css';\n\nconst displayString = props => {\n    if (props.error) {\n        setTimeout(() => {\n            props.clearError();\n        }, 3000);\n        return props.error;\n    }\n    return props.pin.length > 0\n        ? '*'.repeat(props.pin.length)\n        : !props.authorised\n        ? 'Enter PIN'\n        : `Enter withdraw amount: ${props.withdrawAmount}`;\n};\n\nexport const App = props => (\n    <div className=\"App\">\n        <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\" />\n            <p>React ATM</p>\n        </header>\n        <div className=\"atm\">\n            <div className=\"display\">\n                {props.authorised ? (\n                    <code className=\"balance\">\n                        Current Balance: £{props.balance}\n                    </code>\n                ) : null}\n                <code className=\"mainDisplay\">{displayString(props)}</code>\n            </div>\n            <div className=\"inputs\">\n                <div className=\"numbers\">\n                    {Array.from(Array(10), (e, i) => (\n                        <Number\n                            key={i}\n                            value={i}\n                            onClick={\n                                props.authorised\n                                    ? props.withdrawEntry\n                                    : props.pinEntry\n                            }\n                        />\n                    ))}\n                </div>\n                <div className=\"buttons\">\n                    <p onClick={props.cancel} className=\"button cancel\">\n                        CANCEL\n                    </p>\n                    <p\n                        onClick={\n                            props.pin.length > 0\n                                ? props.clearPin\n                                : props.clearWithdraw\n                        }\n                        className=\"button clear\"\n                    >\n                        CLEAR\n                    </p>\n                    <p\n                        onClick={\n                            !props.authorised\n                                ? () => props.confirmPin(props.pin)\n                                : () => props.withdraw(props.withdrawAmount)\n                        }\n                        className=\"button enter\"\n                    >\n                        ENTER\n                    </p>\n                </div>\n            </div>\n        </div>\n    </div>\n);\n\nconst mapStateToProps = state => ({\n    pin: state.ATM.user.pin,\n    authorised: state.ATM.user.authorised,\n    balance: state.ATM.user.balance,\n    withdrawAmount: state.ATM.user.withdrawAmount,\n    error: state.ATM.user.error\n});\n\nconst mapDispatchToProps = dispatch => ({\n    pinEntry: e => dispatch(pinEntry(`${e.target.dataset.value}`)),\n    confirmPin: pin => dispatch(confirmPin(pin)),\n    withdrawEntry: e => dispatch(withdrawEntry(e.target.dataset.value)),\n    withdraw: amount => dispatch(withdraw(amount)),\n    clearWithdraw: () => dispatch(clearWithdraw()),\n    clearPin: () => dispatch(clearPin()),\n    cancel: () => dispatch(cancel()),\n    clearError: () => dispatch(clearError())\n});\n\nexport default connect(\n    mapStateToProps,\n    mapDispatchToProps\n)(App);\n","export const pinEntry = pin => dispatch => {\n    dispatch({\n        type: 'PIN_ENTRY',\n        payload: pin\n    });\n};\n\nexport const clearPin = () => dispatch => {\n    dispatch({\n        type: 'PIN_CLEAR'\n    });\n};\n\nexport const confirmPin = pin => async dispatch => {\n    await fetch(\n        'https://frontend-challenge.screencloud-michael.now.sh/api/pin/',\n        {\n            headers: {\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n            },\n            method: 'POST',\n            body: JSON.stringify({ pin })\n        }\n    )\n        .then(response => response.json())\n        .then(json => {\n            if (!json.error) {\n                dispatch({\n                    type: 'PIN_CONFIRMED',\n                    payload: json.currentBalance\n                });\n            } else {\n                dispatch({\n                    type: 'PIN_ERROR',\n                    payload: json.error\n                });\n            }\n        });\n};\n\nexport const withdrawEntry = amount => dispatch => {\n    dispatch({\n        type: 'WITHDRAW_ENTRY',\n        payload: amount\n    });\n};\n\nexport const withdraw = amount => dispatch => {\n    dispatch({\n        type: 'WITHDRAW_CASH',\n        payload: amount\n    });\n};\n\nexport const clearWithdraw = () => dispatch => {\n    dispatch({\n        type: 'WITHDRAW_CLEAR'\n    });\n};\n\nexport const cancel = () => dispatch => {\n    dispatch({\n        type: 'CANCEL'\n    });\n};\n\nexport const clearError = () => dispatch => {\n    dispatch({\n        type: 'CLEAR_ERROR'\n    });\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { Provider } from 'react-redux';\nimport { configureStore } from './store/';\nimport './index.css';\nimport App from './components/App/';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n    <Provider store={configureStore()}>\n        <App />\n    </Provider>,\n    document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}